<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">
    <!--自动扫描的包-->
    <context:component-scan base-package="com.ssm"/>
    <!--1，引用jdbc配置文件-->
    <!--导入redis和jdbc配置信息-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:redis.properties</value>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>
    <!-- 包含shiro的配置文件 -->
    <import resource="classpath:spring-context-shiro.xml"/>
    <!--dubbo配置文件-->
    <import resource="classpath:spring-context-dubbo.xml"/>
    <import resource="classpath:spring-context-rabbit.xml"/>
    <!--2，配置数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${driverClass}"/>
        <property name="jdbcUrl" value="${jdbcUrl}"/>
        <property name="user" value="${user}"/>
        <property name="password" value="${password}"/>
        <!-- 连接池中保留的最大连接数：default:15 -->
        <property name="maxPoolSize" value="300"/>
        <property name="minPoolSize" value="20"/>
        <property name="breakAfterAcquireFailure" value="false"/>

        <!--每多少秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="30"/>
        <!-- 最大空闲时间, 60秒内未使用则连接被丢弃, 若为0则永不丢弃.default:0 -->
        <property name="maxIdleTime" value="10"/>

        <!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间, 超时后将抛出SQLException,如设为0则无期限等待. 单位为毫秒,default:0-->
        <property name="checkoutTimeout" value="10000"/>
        <!-- 连接池在获得新连接失败时重试的次数，如果小于等于0则无限重试直至连接获得成功 -->
        <property name="acquireRetryAttempts" value="10"/>
        <!-- 两次连接中间隔时间，单位毫秒，连接池在获得新连接时的间隔时间 -->
        <property name="acquireRetryDelay" value="1000"/>
        <!--<property name="preferredTestQuery" value="select 1" />-->
        <property name="testConnectionOnCheckout" value="true"/>
        <!--连接回收超时时间，设置比maxIdleTime大-->
        <!-- 		<property name="unreturnedConnectionTimeout" value="20"/> -->
        <property name="debugUnreturnedConnectionStackTraces" value="true"/>        <!-- 连接泄漏时打印堆栈信息-->
    </bean>

    <!--3，配置SessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--entity类的包名-->
        <property name="typeAliasesPackage" value="com.ssm.bean"/>
        <!--Mapper映射文件-->
        <property name="mapperLocations" value="classpath:mapping/*.xml"/>
        <!--<property name="configLocation" value="classpath:mybatis.cfg.xml"/>-->
    </bean>

    <!--4，生成dao代理对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--sqlSession工厂-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--mapper类包-->
        <property name="basePackage" value="com.ssm.mapper"/>
    </bean>

    <!--5，配置事务管理器为JtaTransactionManager-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--6，配置开启事务操作-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--指定需要应用事务的方法-->
            <tx:method name="add*" isolation="DEFAULT" propagation="REQUIRED"/>
            <tx:method name="insert*" isolation="DEFAULT" propagation="REQUIRED"/>
            <tx:method name="delete*" isolation="DEFAULT" propagation="REQUIRED"/>
            <tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!--7，aop配置，设置切入点，并配置相应的事务-->
    <aop:config>
        <!--切入点，在service层前切入-->
        <aop:pointcut id="stockPoincut" expression="execution(* com.ssm.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="stockPoincut"/>
    </aop:config>

    <!--8,配置redis缓存-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--最大连接数-->
        <property name="maxTotal" value="${jedis.pool.maxTotal}"/>
        <!--最大空闲数-->
        <property name="maxIdle" value="${jedis.pool.maxIdle}"/>
        <!--最大等待时长-->
        <property name="maxWaitMillis" value="${jedis.pool.maxWaitMillis}"/>
        <property name="testOnBorrow" value="${jedis.pool.testOnBorrow}"/>
        <property name="testOnReturn" value="${jedis.pool.testOnReturn}"/>
    </bean>
    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
        <property name="hostName" value="${redis.ip}"/>
        <property name="port" value="${redis.port}"/>
        <property name="password" value=""/>
        <property name="poolConfig" ref="jedisPoolConfig"/>
        <!--超时时间-->
        <property name="timeout" value="${redis.timeout}"/>
        <property name="usePool" value="true"/>
    </bean>

    <!-- 调用连接池工厂配置 -->
    <!-- Spring提供的访问Redis的类. -->
    <bean id="jedisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <!-- 开启事务 -->
        <property name="enableTransactionSupport" value="true"/>
        <!--  如果不配置Serializer，那么存储的时候智能使用String，如果用User类型存储，那么会提示错误User can't cast
         to String！！！   -->
        <!--指明序列化类-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
    </bean>
    <!--开启注解，需要配置cacheManager，此处指定缓存管理器，如果不指定，默认为cacheManager-->
    <cache:annotation-driven cache-manager="redisCacheManager"/>
    <!--redisCache管理器，用于管理redisCache的-->
    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <!--构造方法的第一个参数-->
        <constructor-arg index="0" ref="jedisTemplate"/>
        <!-- 过期时间 -->
        <property name="defaultExpiration" value="300000"/>
        <!--支持事务 -->
        <property name="transactionAware" value="true"/>
    </bean>
    <!--和上面的作用基本一样，不同的是序列化工具不一样，这里面的序列化都是StringRedisSerializer，按情况调用-->
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <!--连接工厂-->
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <!-- 开启事务 -->
        <property name="enableTransactionSupport" value="true"/>
    </bean>
</beans>